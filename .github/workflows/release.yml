name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master

env:
  DOCKER_IMAGE: cbartram/spotify-plex-sync
  ARGOCD_SERVER: kraken-plugins.com
  ARGOCD_APP_NAME: spotify-plex-sync

jobs:
  build-and-push:
    environment: prod
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.set_version.outputs.version_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version tag
        id: set_version
        run: |
          VERSION_TAG="1.0.${{ github.run_number }}"
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION_TAG"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Clear Docker cache
        run: |
          docker buildx prune -af

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.set_version.outputs.version_tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Install ArgoCD CLI
        run: |
          URL=https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo
          $SUDO curl --insecure -sSL -o /usr/local/bin/argocd $URL
          $SUDO chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        env:
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login ${{ env.ARGOCD_SERVER }} \
            --insecure \
            --username $ARGOCD_USERNAME \
            --password $ARGOCD_PASSWORD \
            --grpc-web \
            --grpc-web-root-path /argocd

      - name: Update ArgoCD application
        run: |
          VERSION_TAG="${{ needs.build-and-push.outputs.version_tag }}"
          echo "Deploying version: $VERSION_TAG"
          argocd app set ${{ env.ARGOCD_APP_NAME }} \
            -p image.tag=$VERSION_TAG \
            --grpc-web

      - name: Sync ArgoCD application
        run: |
          argocd app sync ${{ env.ARGOCD_APP_NAME }} --prune

      - name: Wait for deployment
        run: |
          argocd app wait ${{ env.ARGOCD_APP_NAME }}
          echo "Deployment complete!"

      - name: Get deployment status
        if: always()
        run: |
          argocd app get ${{ env.ARGOCD_APP_NAME }} --grpc-web